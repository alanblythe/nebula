name: dotnet package

on:
  push:
    paths:
      - 'src/Api/**'
      - 'src/Client/**'
      - 'src/Services/**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        dotnet-version: ['7.0' ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        working-directory: ./src/Api
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ./src/Api
      - name: Test
        run: dotnet test --no-restore --verbosity normal
        working-directory: ./src/Api
      - name: Add Microsoft.NET.Build.Containers package
        working-directory: ./src/Api
        run: dotnet add package Microsoft.NET.Build.Containers
  terraform:
    strategy:
      max-parallel: 1
      matrix: 
        run: ['run1']
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deploy
    steps:
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  deployapps:
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      max-parallel: 1
      matrix: 
        run: ['run1']

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
      - name: dotnet publish
        working-directory: ./src/Api
        run: dotnet publish -p PublishProfile=DefaultContainer
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_URI }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: docker tag for ACR, latest
        run: docker tag nebula-api:latest ${{ secrets.ACR_URI }}/nebula-api:latest
      - name: docker push to ACR, latest
        run: docker push ${{ secrets.ACR_URI }}/nebula-api:latest
      - name: docker tag for ACR, github.sha
        run: docker tag nebula-api:latest ${{ secrets.ACR_URI }}/nebula-api:${{ github.sha }}
      - name: docker push to ACR, github.sha
        run: docker push ${{ secrets.ACR_URI }}/nebula-api:${{ github.sha }}
        